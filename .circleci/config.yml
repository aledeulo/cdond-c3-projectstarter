version: 2.1

orbs:
  slack: circleci/slack@4.1

aws_docker_image: &aws_docker_image
  docker:
    - image: amazon/aws-cli


node_docker_image: &node_docker_image
  docker:
    - image: circleci/node:13.8.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name frontend-stack-${CIRCLE_WORKFLOW_ID:0:7} && \
            echo "CloudFormation cleaning has being triggered for frontend-stack-${CIRCLE_WORKFLOW_ID:0:7}!" && \
            aws cloudformation delete-stack --stack-name backend-stack-${CIRCLE_WORKFLOW_ID:0:7} && \
            echo "CloudFormation cleaning has being triggered for backend-stack-${CIRCLE_WORKFLOW_ID:0:7}!"
            
jobs:
  build-frontend:
    <<: *node_docker_image
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Build front-end
          command: |
            cd ./frontend && \
            npm install && npm run build
      - save_cache:
          paths: 
            - ./node_modules
          key: frontend-build-${CIRCLE_WORKFLOW_ID:0:7}

  build-backend:
    <<: *node_docker_image
    steps:
      - checkout
      - restore_cache:
          key: backend-build-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Back-end build
          command: |
              cd ./backend && \
              npm install && npm run build
      - save_cache:
          paths: 
            - ./node_modules
          key: backend-build-${CIRCLE_WORKFLOW_ID:0:7}

  test-frontend:
    <<: *node_docker_image
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Running tests for frontend
          command:  |
            cd ./frontend && \
            npm i && npm run test
                
  test-backend:
    <<: *node_docker_image
    steps:
      - checkout
      - restore_cache:
          key: backend-build-${CIRCLE_WORKFLOW_ID:0:7}
      - run: 
          name: Running backend tests
          command:  |
            cd ./backend && \
            npm i && npm run test
            
  scan-frontend:
    <<: *node_docker_image
    steps:
      - checkout
      - run: 
          name: Run audit for frontend
          command: |
            cd ./frontend && \
            npm install && npm audit fix --audit-level=critical

  scan-backend:
    <<: *node_docker_image
    steps:
      - checkout
      - run: 
          name: Run audit for backend
          command: |
            cd ./backend && \
            npm install && npm audit fix --audit-level=critical
  
  deploy-infrastructure:
    <<: *aws_docker_image
    steps:
      - checkout
      - run:
          name: Create blue bucket
          command: |
              aws s3api create-bucket \
              --bucket udapeople-${CIRCLE_WORKFLOW_ID:0:7}  \ 
              --region ${AWS_DEFAULT_REGION} \
              --acl public-read
      - run:
          name: Create the CloudFront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
               --tags project=udapeople \
              --stack-name "udapeople-frontend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:  
          name: Install necessary tools for workspace
          command: |
            yum install -y tar gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt && \
            pwd && cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/.circleci/ansible
      - destroy-environment 
      
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ea:43:42:b3:40:5f:88:9b:e5:a5:53:6a:9b:d6:2b:64"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible && \
            ls -l && \
            ansible-playbook -i inventory configure-server.yml && \
            ansible-playbook -i inventory deploy-backend.yml
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*Configure instances job has falied. Please go to CircleCI to see details.*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
      - destroy-environment  
      

workflows:
  deploy-project:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [deploy-infrastructure]
          context: slack-secrets        
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      #     filters:
      #       branches:
      #         only: [deploy-infrastructure]
      #     context: slack-secrets

      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]