version: 2.1

orbs:
  slack: circleci/slack@4.1

aws_docker_image: &aws_docker_image
  docker:
    - image: amazon/aws-cli

node_docker_image: &node_docker_image
  docker:
    - image: circleci/node:13.8.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.    
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
              aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-stack-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-backend-stack-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-cloudfront-stack-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration
    steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
                SUCCESS=$(curl --insecure  https://kvdb.io/HjkKC8BTsm9JDdQw2vArNd/migration_${CIRCLE_WORKFLOW_ID:0:7})
                # Logic for reverting the database state
                if (( $SUCCESS == 1 ));
                then
                    cd backend
                    npm install
                    npm run migration:revert
                fi 
            
jobs:
  build-frontend:
    <<: *node_docker_image
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Build front-end
          command: |
            cd ./frontend && \
            npm install && npm run build
      - save_cache:
          paths: 
            - ./node_modules
          key: frontend-build-${CIRCLE_WORKFLOW_ID:0:7}

  build-backend:
    <<: *node_docker_image
    steps:
      - checkout
      - restore_cache:
          key: backend-build-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Back-end build
          command: |
              cd ./backend && \
              npm install && npm run build
      - save_cache:
          paths: 
            - ./node_modules
          key: backend-build-${CIRCLE_WORKFLOW_ID:0:7}

  test-frontend:
    <<: *node_docker_image
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Running tests for frontend
          command:  |
            cd ./frontend && \
            npm i && npm run test
                
  test-backend:
    <<: *node_docker_image
    steps:
      - checkout
      - restore_cache:
          key: backend-build-${CIRCLE_WORKFLOW_ID:0:7}
      - run: 
          name: Running backend tests
          command:  |
            cd ./backend && \
            npm i && npm run test
            
  scan-frontend:
    <<: *node_docker_image
    steps:
      - checkout
      - run: 
          name: Run audit for frontend
          command: |
            cd ./frontend && \
            npm install && npm audit fix --audit-level=critical

  scan-backend:
    <<: *node_docker_image
    steps:
      - checkout
      - run: 
          name: Run audit for backend
          command: |
            cd ./backend && \
            npm install && npm audit fix --audit-level=critical
  
  deploy-infrastructure:
    <<: *aws_docker_image
    steps:
      - checkout
      - run:  
            name: Install tar and gzip for workspace
            command: |
              yum install -y tar gzip
      - run:
          name: Deploy back-end
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
          no_output_timeout: 30m
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --filters "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt && \
            cat .circleci/ansible/inventory.txt
      - run:
          name: Deploy front-end
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
               --tags project=udapeople \
              --stack-name "udapeople-frontend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
          no_output_timeout: 30m   
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "ea:43:42:b3:40:5f:88:9b:e5:a5:53:6a:9b:d6:2b:64"
      - attach_workspace:
          at: ~/
      - run:
          name: Install ansible
          command: apk add --update ansible
      - run:
          name: Install openssh
          command: apk add openssh-client
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible && \
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt configure-server.yml
          no_output_timeout: 30m
      - run: 
          name: Install aws-cli
          command: |
            apk add python curl
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
          when: on_fail
      - destroy-environment
  
  run-migrations:
    <<: *node_docker_image
    steps:
      - checkout
      - restore_cache:
          key: backend-build-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Run backend migrations
          command: |
            cd backend && \
            npm install && \
            npm run migrations > migrations_dump.txt && \
            cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
              if grep -q "has been executed successfully." backend/migrations_dump.txt
              then
                  curl https://kvdb.io/HjkKC8BTsm9JDdQw2vArNd/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
      - run: 
          name: Install aws-cli
          command: |
            apk add python curl
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
          when: on_fail
      - destroy-environment

  deploy-frontend:
    <<: *aws_docker_image
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
            yum -y install nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:  
            name: Install tar and gzip
            command: |
              yum install -y tar gzip
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "ea:43:42:b3:40:5f:88:9b:e5:a5:53:6a:9b:d6:2b:64"
      - attach_workspace:
          at: ~/
      - run:
          name: Install ansible
          command: apk add --update ansible
      - run:
          name: Install openssh
          command: apk add openssh-client
      - run:  
            name: Install tar
            command: apk add tar
      - run:  
            name: Install npm
            command: apk add npm
      - run:
          name: Build and pack backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz .circleci/ansible
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml
          no_output_timeout: 30m
      - run: 
          name: Install aws-cli
          command: |
            apk add python curl
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
          when: on_fail
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: 
          name: Install aws-cli
          command: |
            apk add python curl
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: Get backend url and Backend smoke test.
          command: | 
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo 'Received IP: ${BACKEND_IP}'      
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations
  
  cloudfront-update:
    <<: *aws_docker_image
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)

            echo $OldWorkflowID >> OldWorkflowID.txt
            cat OldWorkflowID.txt

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "udapeople-promote-stack-${OldWorkflowID}" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
      - persist_to_workspace:
          root: ~/
          paths:
            - project/OldWorkflowID.txt
      - destroy-environment
      - revert-migrations

  cleanup:
    <<: *aws_docker_image
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:  
            name: Install dependencies
            command: |
              yum install -y tar gzip
      - run:
          name: Fetch OldStack Workflow ID
          command: |
            cat ~/project/OldWorkflowID.txt
            OldWorkflowID=$(cat ~/project/OldWorkflowID.txt)

            echo OldWorkflowID: "${OldWorkflowID}"
            echo $OldWorkflowID

            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-stack-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-backend-stack-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-promote-stack-${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "Cannot delete"
            fi

workflows:
  deploy-project:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
          context: Slack notifications      
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]
          context: Slack notifications
      # - run-migrations:
      #     requires: [configure-infrastructure]
      #     filters:
      #       branches:
      #         only: [master]
      - deploy-frontend:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]
      - deploy-backend:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only: [master]
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only: [master]
      - cleanup:
          requires: [cloudfront-update]
          filters:
            branches:
              only: [master]